parents 	: {1: <Agent(1, initial)>}
successors	: [<Agent(4, initial)>, <Agent(3, initial)>]
-------------------------------------------
sending ok? msg
messages	: [[1, 1, [0, 0]]]
agent2 is running
processing ok? msg from agent1
check_agent_view	: {1: [0, 0]}
not consistent	: {1: [0, 0]}	[1, 0]
sending ok? msg
after chech_agent_view	: [1, 2]
-----------------------------------
pos		: [1, 2]
message	: []
agent_view	: {1: [0, 0]}
no_goods	: {-1: {0: [-1, -1]}}
-----------------------------------
processing no_good msg recieved from agent3	[3, 2, {1: [0, 0], 2: [1, 2]}]
sending ok? msg
-----------------------------------
pos		: [1, 3]
message	: []
agent_view	: {1: [0, 0]}
no_goods	: {1: {1: [0, 0], 2: [1, 2]}, -1: {0: [-1, -1]}}
-----------------------------------
processing no_good msg recieved from agent3	[3, 2, {1: [0, 0], 2: [1, 3]}]
2domain exhausted --> backtrack
sending no_goods to agent 1	{1: [0, 0]}
check_agent_view	: {}
after chech_agent_view	: [1, 3]
-----------------------------------
pos		: [1, 3]
message	: [[1, 1, [0, 1]]]
agent_view	: {}
no_goods	: {1: {1: [0, 0], 2: [1, 2]}, 2: {1: [0, 0], 2: [1, 3]}, -1: {0: [-1, -1]}}
-----------------------------------
processing ok? msg from agent1
check_agent_view	: {1: [0, 1]}
after chech_agent_view	: [1, 3]
-----------------------------------
pos		: [1, 3]
message	: []
agent_view	: {1: [0, 1]}
no_goods	: {1: {1: [0, 0], 2: [1, 2]}, 2: {1: [0, 0], 2: [1, 3]}, -1: {0: [-1, -1]}}
-----------------------------------
